<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApiServer</name>
    </assembly>
    <members>
        <member name="T:ApiServer.Cache.MemoryCache.ICacheService">
            <summary>
            声明缓存接口
            </summary>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.ICacheService.Add(System.String,System.Object,System.Int32)">
            <summary>
            新增
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationTime"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.ICacheService.GetValue(System.String)">
            <summary>
            获取
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.ICacheService.Exists(System.String)">
            <summary>
            验证缓存项是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.ICacheService.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Cache.MemoryCache.MemoryCacheService">
            <summary>
            实例化缓存接口ICaching
            </summary>
        </member>
        <member name="F:ApiServer.Cache.MemoryCache.MemoryCacheService.Cache">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.Add(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationTime"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Cache.MemoryCache.RedisCacheService">
            <summary>
            Redis缓存接口实现
            </summary>
        </member>
        <member name="F:ApiServer.Cache.MemoryCache.RedisCacheService.RedisCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.#ctor(Microsoft.Extensions.Caching.Redis.RedisCacheOptions)">
            <summary>
            构造函数注入
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.Add(System.String,System.Object,System.Int32)">
            <summary>
            新增
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationTime"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Controllers.CwCoursewareController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.#ctor(ApiServer.BLL.IBLL.ICwCoursewareService,ApiServer.BLL.IBLL.IBaseService{ApiServer.Model.Entity.cw_courseware})">
            <summary>
            
            </summary>
            <param name="cwCoursewareService"></param>
            <param name="baseService"></param>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.AddCourseware(ApiServer.Model.Entity.cw_courseware)">
            <summary>
            新增
            </summary>
            <param name="courseware"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.UpdateCourseware(ApiServer.Model.Entity.cw_courseware)">
            <summary>
            更新
            </summary>
            <param name="courseware"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.DeleteCourseware(System.Int32)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.GetCourseware(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.ListCourseware(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.ListCoursewareByAdmin(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.GetCarousel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.GetCarouselForAdmin">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwExchangeKeyController.ListKey(System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Controllers.ExceptionController">
            <summary>
            异常
            </summary>
        </member>
        <member name="M:ApiServer.Controllers.ExceptionController.#ctor(Microsoft.Extensions.Logging.ILogger{ApiServer.Controllers.ExceptionController})">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ApiServer.Controllers.SysUserController.#ctor(ApiServer.BLL.IBLL.ISysUserService,ApiServer.BLL.IBLL.ICommonService)">
            <summary>
            
            </summary>
            <param name="sysUserService"></param>
        </member>
        <member name="M:ApiServer.Controllers.SysUserController.SignUp(ApiServer.Model.Model.Dto.UserDto)">
            <summary>
            注册
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.UploadController.#ctor(ApiServer.BLL.IBLL.IOssService)">
            <summary>
            
            </summary>
            <param name="ossService"></param>
        </member>
        <member name="T:ApiServer.Exception.GlobalExceptionFilter">
            <summary>
            自定义全局异常过滤器：当程序发生异常时，处理系统出现的未捕获的异常
            自定义一个全局异常过滤器需要实现IExceptionFilter接口
            </summary>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{ApiServer.Exception.GlobalExceptionFilter},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
            <param name="env"></param>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            IExceptionFilter接口会要求实现OnException方法，当系统发生未捕获异常时就会触发这个方法。
            OnException方法有一个ExceptionContext异常上下文，其中包含了具体的异常信息，HttpContext及mvc路由信息。
            系统一旦出现未捕获异常后，比较常见的做法就是使用日志工具，将异常的详细信息记录下来，方便调试
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Exception.GlobalExceptionFilter.InternalServerErrorObjectResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.InternalServerErrorObjectResult.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:ApiServer.Mapping.MapsterMap">
            <summary>
            Mapster注入
            </summary>
        </member>
        <member name="M:ApiServer.Mapping.MapsterMap.AddMapster(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            自定义扩展service
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Middleware.ExceptionMiddleware">
            <summary>
            统一异常处理
            </summary>
        </member>
        <member name="M:ApiServer.Middleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
            <param name="environment"></param>
        </member>
        <member name="M:ApiServer.Middleware.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            异常处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Middleware.RefererMiddleware">
            <summary>
            对请求头Referer判断过滤
            </summary>
        </member>
        <member name="M:ApiServer.Middleware.RefererMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ApiServer.Middleware.RefererMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            对referer来源判断
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            自动注册
            </summary>
            <param name="builder"></param>
        </member>
    </members>
</doc>
