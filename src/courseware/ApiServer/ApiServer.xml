<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApiServer</name>
    </assembly>
    <members>
        <member name="T:ApiServer.Cache.MemoryCache.ICacheService">
            <summary>
            声明缓存接口
            </summary>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.ICacheService.Add(System.String,System.Object,System.Int32)">
            <summary>
            新增
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationTime"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.ICacheService.GetValue(System.String)">
            <summary>
            获取
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.ICacheService.Exists(System.String)">
            <summary>
            验证缓存项是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.ICacheService.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Cache.MemoryCache.MemoryCacheService">
            <summary>
            实例化缓存接口ICaching
            </summary>
        </member>
        <member name="F:ApiServer.Cache.MemoryCache.MemoryCacheService.Cache">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.Add(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationTime"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.MemoryCacheService.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Cache.MemoryCache.RedisCacheService">
            <summary>
            Redis缓存接口实现
            </summary>
        </member>
        <member name="F:ApiServer.Cache.MemoryCache.RedisCacheService.RedisCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.#ctor(Microsoft.Extensions.Caching.Redis.RedisCacheOptions)">
            <summary>
            构造函数注入
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.Add(System.String,System.Object,System.Int32)">
            <summary>
            新增
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationTime"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Cache.MemoryCache.RedisCacheService.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Controllers.CwCoursewareController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.AddCourseWare(ApiServer.Model.Entity.cw_courseware)">
            <summary>
            新增
            </summary>
            <param name="courseware"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.UpdateCourseWare(ApiServer.Model.Entity.cw_courseware)">
            <summary>
            更新
            </summary>
            <param name="courseware"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.DeleteCourseWare(System.Int32)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.getCourseWare(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.listCourseWare(System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.listCourseWareByAdmin(System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.getCarousel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.CwCoursewareController.getCarouselForAdmin">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Controllers.ExceptionController">
            <summary>
            异常
            </summary>
        </member>
        <member name="M:ApiServer.Controllers.ExceptionController.#ctor(Microsoft.Extensions.Logging.ILogger{ApiServer.Controllers.ExceptionController})">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ApiServer.Controllers.SysUserController.#ctor(ApiServer.BLL.IBLL.ISysUserService)">
            <summary>
            
            </summary>
            <param name="sysUserService"></param>
        </member>
        <member name="M:ApiServer.Controllers.UploadController.#ctor(ApiServer.BLL.IBLL.IOssService)">
            <summary>
            
            </summary>
            <param name="ossService"></param>
        </member>
        <member name="T:ApiServer.Exception.GlobalExceptionFilter">
            <summary>
            自定义全局异常过滤器：当程序发生异常时，处理系统出现的未捕获的异常
            自定义一个全局异常过滤器需要实现IExceptionFilter接口
            </summary>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{ApiServer.Exception.GlobalExceptionFilter},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
            <param name="env"></param>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            IExceptionFilter接口会要求实现OnException方法，当系统发生未捕获异常时就会触发这个方法。
            OnException方法有一个ExceptionContext异常上下文，其中包含了具体的异常信息，HttpContext及mvc路由信息。
            系统一旦出现未捕获异常后，比较常见的做法就是使用日志工具，将异常的详细信息记录下来，方便调试
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Exception.GlobalExceptionFilter.InternalServerErrorObjectResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.InternalServerErrorObjectResult.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:ApiServer.JWT.JwtHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiServer.JWT.JwtHelper.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="F:ApiServer.JWT.JwtHelper.SecurityKey">
            <summary>
            秘钥，可以从配置文件中获取
            </summary>
        </member>
        <member name="M:ApiServer.JWT.JwtHelper.IssueJwt(ApiServer.Model.Model.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.JWT.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.JWT.JwtHelper.RefreshToken(System.String)">
            <summary>
            刷新token值
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiServer.JWT.JwtHelper.Validate(System.String)">
            <summary>
            验证身份 验证签名的有效性,
            </summary>
            <param name="encodeJwt"></param>
            例如：payLoad["aud"]?.ToString() == "roberAuddience";
            例如：验证是否过期 等
            <returns></returns>
        </member>
        <member name="M:ApiServer.JWT.JwtHelper.GetPayLoad(System.String)">
            <summary>
            获取jwt中的payload
            </summary>
            <param name="encodeJwt"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.JWT.JwtHelper.ToUnixEpochDate(System.DateTime)">
            <summary>
            datetime转时间戳
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.JWT.JwtSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:ApiServer.JWT.JwtSettings.Issuer">
            <summary>
            证书颁发者
            </summary>
        </member>
        <member name="P:ApiServer.JWT.JwtSettings.Audience">
            <summary>
            允许使用的角色
            </summary>
        </member>
        <member name="P:ApiServer.JWT.JwtSettings.SecretKey">
            <summary>
            加密字符串
            </summary>
        </member>
        <member name="P:ApiServer.JWT.JwtSettings.ExpireMinutes">
            <summary>
            过期时间（分钟）
            </summary>
        </member>
        <member name="T:ApiServer.JWT.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="M:ApiServer.JWT.PermissionRequirement.#ctor">
            <summary>
            这里是写死的，也可从数据库获取
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:ApiServer.JWT.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{ApiServer.Model.Model.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="T:ApiServer.Mapping.MapsterMap">
            <summary>
            Mapster注入
            </summary>
        </member>
        <member name="M:ApiServer.Mapping.MapsterMap.AddMapster(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            自定义扩展service
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Middleware.ExceptionMiddleware">
            <summary>
            统一异常处理
            </summary>
        </member>
        <member name="M:ApiServer.Middleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
            <param name="environment"></param>
        </member>
        <member name="M:ApiServer.Middleware.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            异常处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Middleware.RefererMiddleware">
            <summary>
            对请求头Referer判断过滤
            </summary>
        </member>
        <member name="M:ApiServer.Middleware.RefererMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ApiServer.Middleware.RefererMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            对referer来源判断
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            自动注册
            </summary>
            <param name="builder"></param>
        </member>
    </members>
</doc>
